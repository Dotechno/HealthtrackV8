# Field names should use camelCase. Many GraphQL clients are written in JavaScript, Java, Kotlin, or Swift, all of which recommend camelCase for variable names.
# Type names should use PascalCase. This matches how classes are defined in the languages mentioned above.
# Enum names should use PascalCase.
# Enum values should use ALL_CAPS, because they are similar to constants.

type ServiceProvidedByClinic @model @auth(rules: [{allow: private}]) {
  id: ID!
  type: String
  description: String
  billableCostForService: Float
}

type LabTest @model @auth(rules: [{allow: private}]) {
  id: ID!
  typeName: String
  rangeOfNotNormalResults: String
  laborderID: ID! @index(name: "byLabOrder")
  rangeOfNormalResults: String
}

type Prescription @model @auth(rules: [{allow: private}]) {
  id: ID!
  physicianName: String
  prescribedMedication: String
  medicineDosage: String
  frequencyOfMedication: String
  datePrescriptionFilled: AWSDate
  pharmacistWhoFilledPrescription: String
  medicalencounterID: ID! @index(name: "byMedicalEncounter")
  Prescription2ServiceProvidedByClinic: ServiceProvidedByClinic @hasOne
}

type LabOrder @model @auth(rules: [{allow: private}]) {
  id: ID!
  physicianName: String
  type: String
  date: AWSDate
  technician: String
  result: String
  medicalencounterID: ID! @index(name: "byMedicalEncounter")
  LabOrder2ServiceProvideByClinic: ServiceProvidedByClinic @hasOne
  LabOrder2ServiceProvidedByClinic: ServiceProvidedByClinic @hasOne
}

type VitalSign @model @auth(rules: [{allow: private}]) {
  id: ID!
  bodyTemperature: String
  pulseRate: String
  respirationRate: String
  bloodPressure: String
}

type WorkSchedule @model @auth(rules: [{allow: private}]) {
  id: ID!
  date: [AWSDate]
  time: [Boolean]
  physicianID: ID! @index(name: "byPhysician")
  appointmentScheduled: [AppointmentPicker]
}

enum Practitioner {
  PHYSICIAN
  NURSE
  PHYSICIAN_ASSISTANT
}

type AppointmentPicker {
  eventID: ID
  isReserved: Boolean
  period: Int
}

enum AppointmentType {
  URGENT
  ROUNTINE
  FOLLOW_UP_VISIT
}

type Appointment @model @auth(rules: [{allow: private}]) {
  id: ID!
  date: AWSDate
  type: AppointmentType
  time: [AppointmentPicker]
  patientID: ID! @index(name: "byPatient")
  physicianID: ID! @index(name: "byPhysician")
  Appointment2ServiceProvidedByClinic: ServiceProvidedByClinic @hasOne
}

type Medication @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  useOfMedication: String
  recommendedDosage: String
  recommendedFrequencyOfUse: String
  potentialSideEffect: String
  drugThatMayReactAdversely: String
}

type WeekSchedule {
  weekDays: Day
}

type Day {
  id: String!
  isReserved: Boolean
  periods: Int!
  number: String
}

type PhysicianSchedule @model @auth(rules: [{allow: public}]) {
  id: ID!
  schedule: WeekSchedule
}

type Physician @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  cellPhoneNumber: String
  schedule: PhysicianSchedule @hasOne
  Physician2Appointment: [Appointment] @hasMany(indexName: "byPhysician", fields: ["id"])
}

type InsuranceCarrier @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  address: String
  status: String
}

type MedicalEncounter @model @auth(rules: [{allow: private}]) {
  id: ID!
  encounterDateTime: AWSDate
  practitionerTypeSeen: Practitioner
  patientComplaints: String
  vitalSigns: String
  practionerNotes: String
  labOrders: String
  pharmacyOrders: String
  diagnosis: String
  treatmentPlan: String
  referralToSpecialists: String
  recommendedFollowUp: String
  dataTimeEncounterSubmitted: AWSDate
  employeeIDWhoSubmitted: Int
  patientID: ID! @index(name: "byPatient")
  MedicalEncounter2VitalSign: VitalSign @hasOne
  MedicalEncounter2LabOrder: [LabOrder] @hasMany(indexName: "byMedicalEncounter", fields: ["id"])
  MedicalEncounter2Prescription: [Prescription] @hasMany(indexName: "byMedicalEncounter", fields: ["id"])
}

type Patient @model @auth(rules: [{allow: private}]) {
  id: ID!
  name: String
  telephoneNumber: String
  insuranceCarrierID: String
  dateOfBirth: String
  gender: String
  primaryCarePhysician: String
  Patient2MedicalEncounters: [MedicalEncounter] @hasMany(indexName: "byPatient", fields: ["id"])
  Patient2InsuranceCarrier: InsuranceCarrier @hasOne
  Patient2Physician: Physician @hasOne
  Patient2Appointment: [Appointment] @hasMany(indexName: "byPatient", fields: ["id"])
}

enum Status {
  FINISHED
  IN_PROGRESS
  UNFINISHED
}

type EquipmentMaintenance @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String
  problem: String
  status: Status
  resolution: String
  equipmentID: ID! @index(name: "byEquipment")
}

type Equipment @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String
  description: String
  department: String
  owned: Boolean
  startDate: AWSDate
  endDate: AWSDate
  leasingCompany: String
  datePurchased: String
  Equipment2EquipmentMaintenance: [EquipmentMaintenance] @hasMany(indexName: "byEquipment", fields: ["id"])
  Equipment2Vendor: [Vendor] @hasMany(indexName: "byEquipment", fields: ["id"])
}

type Vendor @model @auth(rules: [{allow: owner}]) {
  id: ID!
  name: String!
  address: String!
  equipment: String
  preferred: Boolean
  equipmentID: ID! @index(name: "byEquipment")
}
